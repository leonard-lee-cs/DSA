Date: 7/29/2024

Intuition:

The question requires the biggest diameter of the tree or largest left height + right height of
the given binary tree.

we can call dfs on the root node

for each node, calculate it's largest left height, largest right height.
use the heights to calculate it's diameter,
return diameter and max between left and right height + 1 to its parent.

parent will have the max diameter.


Solution:

class Solution:
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        
        def dfs(node):
            if not node:
                return [0, 0]

            l = dfs(node.left)
            r = dfs(node.right)

            diameter = max(l[0], r[0], l[1] + r[1])
            height = max(l[1], r[1]) + 1

            return [diameter, height]

        return dfs(root)[0]


Time Complexity:
O(V + E) for dfs

Space Complexity:
O(V) for max depth of the recursion.

